package io.github.kariuwu.maven;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import org.apache.maven.model.Dependency;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;
import org.json.JSONArray;
import org.json.JSONObject;
import org.json.JSONTokener;

import java.io.*;
import java.net.HttpURLConnection;
import java.net.SocketTimeoutException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

@Mojo(name = "list", defaultPhase = LifecyclePhase.COMPILE)
public class ArchiveArtifactListPluginMojo extends AbstractMojo {
    @Parameter(defaultValue = "${project}", readonly = true, required = true)
    MavenProject project;

    @Parameter(property = "scope")
    String scope;

    @Parameter(property = "outputFile", defaultValue = "${project.build.directory}/dependencies.json")
    private File outputFile;

    @Parameter(property = "nvdDataDirectory", defaultValue = "${project.build.directory}/nvd-data")
    private File nvdDataDirectory;
    // b2c1b593-b233-4c55-94c0-73fcd91c923f
    @Parameter(property = "nvdApiKey", defaultValue = "")
    private String nvdApiKey;

    // NVD API Base URL
    private static final String NVD_API_BASE_URL = "https://services.nvd.nist.gov/rest/json/cves/2.0/";

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {
        // Ensure output directory exists
        ensureDirectoryExists(outputFile.getParentFile());

        // Ensure NVD data directory exists
        ensureDirectoryExists(nvdDataDirectory);

        // Download NVD database
        downloadNvdDatabase();

        try {
            prettyPrintJsonFile(String.valueOf(Paths.get(nvdDataDirectory.getAbsolutePath(), "nvd-cves.json")), String.valueOf(Paths.get(nvdDataDirectory.getAbsolutePath(), "prettyPrintJsonFile.json")));
        } catch (IOException e) {
            throw new RuntimeException(e);
        }

        // Process dependencies
        processDependencies();
    }

    private void ensureDirectoryExists(File directory) throws MojoExecutionException {
        if (!directory.exists()) {
            if (!directory.mkdirs()) {
                throw new MojoExecutionException("Failed to create directory: " + directory.getAbsolutePath());
            }
        }
    }

    private void downloadNvdDatabase() throws MojoExecutionException {
        try {
//            LocalDateTime thirtyDays = LocalDateTime.now().minusDays(80);
//            String formattedThrityDays = thirtyDays.format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);

            // Construct URL with optional API key
            String urlString = NVD_API_BASE_URL + "?resultsPerPage=20&startIndex=0";
//                    "?resultsPerPage=2000" +
//                    "&startIndex=0" +
//                    "&pubStartDate=2024-05-01T00:00:00";
            URL url = new URL(urlString);

            // Create connection
            HttpURLConnection connection = (HttpURLConnection) url.openConnection();
            connection.setRequestMethod("GET");

            //  API key is supposed to be b2c1b593-b233-4c55-94c0-73fcd91c923f, doesnt work for now
            if (nvdApiKey != null && !nvdApiKey.isEmpty()) {
                connection.setRequestProperty("apiKey", nvdApiKey);
            }

            // Check response code
            int responseCode = connection.getResponseCode();
            if (responseCode == HttpURLConnection.HTTP_OK) {
                Path outputPath = Paths.get(nvdDataDirectory.getAbsolutePath(), "nvd-cves.json");

                // Save response to file
                try (InputStream inputStream = connection.getInputStream();
                     FileOutputStream outputStream = new FileOutputStream(outputPath.toFile())) {
//                    byte[] length = inputStream.readAllBytes();
//                    getLog().info("HOW MANY BYTES: " + Arrays.toString(length).length());

                    byte[] buffer = new byte[4096];
                    int bytesRead;
                    while ((bytesRead = inputStream.read(buffer)) != -1) {
                        getLog().info("BYTES: " + bytesRead);
                        outputStream.write(buffer, 0, bytesRead);
                    }

                } catch (SocketTimeoutException e) {
                    throw new MojoExecutionException("Error downloading the data " + e);
                }

                getLog().info("Successfully downloaded NVD CVE data");

            } else {
                throw new MojoExecutionException("Failed to download NVD data. Response Code: " + responseCode);
            }
        } catch (Exception e) {
            throw new MojoExecutionException("Error downloading NVD data", e);
        }
    }

    public void prettyPrintJsonFile(String inputFilePath, String outputFilePath) throws IOException {
        Gson gson = new GsonBuilder()
                .setPrettyPrinting()
                .create();

        Object jsonObject = gson.fromJson(new FileReader(inputFilePath), Object.class);
        try (FileWriter writer = new FileWriter(outputFilePath)) {
            gson.toJson(jsonObject, writer);
        }

    }

    private void processDependencies() throws MojoFailureException {
        List<Dependency> dependencies = project.getDependencies();
        JSONArray jsonDependencies = new JSONArray();

        try (FileWriter writer = new FileWriter(outputFile)) {
            long numberOfDependencies = dependencies.stream()
                    .filter(dependency -> (scope == null) || scope.isEmpty() || scope.equals(dependency.getScope()))
                    .count();

            getLog().info("Dependencies found: " + numberOfDependencies);

            dependencies.stream()
                    .filter(dependency -> (scope == null) || scope.isEmpty() || scope.equals(dependency.getScope()))
                    .forEach(dependency -> jsonDependencies.put(formatDependency(dependency)));

            getLog().info("Listing all dependencies:");
            getLog().info(jsonDependencies.toString());

            writer.write(jsonDependencies.toString(4));
            getLog().info("Dependencies written into: " + outputFile.getAbsolutePath());
        } catch (IOException e) {
            throw new MojoFailureException(e);
        }
    }

    private JSONObject formatDependency(Dependency dependency) {
        JSONObject jsonList = new JSONObject();
        jsonList.put("groupID", dependency.getGroupId());
        jsonList.put("artifactID", dependency.getArtifactId());
        jsonList.put("version", dependency.getVersion());
        jsonList.put("scope", dependency.getScope());
        return jsonList;
    }
}