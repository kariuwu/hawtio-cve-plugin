package io.github.kariuwu.maven;

import org.apache.maven.model.Dependency;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;
import org.apache.maven.project.MavenProject;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

import org.json.JSONArray;
import org.json.JSONObject;


//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
@Mojo(name = "list", defaultPhase = LifecyclePhase.COMPILE)
public class ArchiveArtifactListPluginMojo extends AbstractMojo {

    @Parameter(defaultValue = "${project}", readonly = true, required = true)
    MavenProject project;

    @Parameter(property = "scope")
    String scope;

    @Parameter(property = "outputFile", defaultValue = "${project.build.directory}/dependencies.json")
    private File outputFile;

    @Override
    public void execute() throws MojoExecutionException, MojoFailureException {

        File parentDir = outputFile.getParentFile();  // Get the parent directory of the output file
        if (!parentDir.exists()) {  // Check if the directory exists
            if (!parentDir.mkdirs()) {  // Create directory (and any nonexistent parent directories)
                throw new MojoExecutionException("Failed to create directory: " + parentDir.getAbsolutePath());
            }
        }
        List<Dependency> dependencies = project.getDependencies();
        JSONArray jsonDependencies = new JSONArray();
        try (FileWriter writer = new FileWriter(outputFile)) {
            long numberOfDependencies = dependencies.stream()
                    .filter(dependency -> (scope == null) || scope.isEmpty() || scope.equals(dependency.getScope()))
                    .count();
            getLog().info("Dependencies found:" + numberOfDependencies);
            dependencies.stream()
                    .filter(dependency -> (scope == null) || scope.isEmpty() || scope.equals(dependency.getScope()))
                    .forEach(dependency -> jsonDependencies.put(formatDependency(dependency)));

            getLog().info("Listing all dependencies:");
            getLog().info(jsonDependencies.toString());
            writer.write(jsonDependencies.toString(4));
            getLog().info("Depndencies written into: " + outputFile.getAbsolutePath());
        } catch (IOException e) {
            throw new MojoFailureException(e);
        }

    }

    private JSONObject formatDependency(Dependency dependency) {
        JSONObject jsonList = new JSONObject();
        jsonList.put("groupID", dependency.getGroupId());
        jsonList.put("artifactID", dependency.getArtifactId());
        jsonList.put("version", dependency.getVersion());
        jsonList.put("scope", dependency.getScope());

        return jsonList;

    }
}